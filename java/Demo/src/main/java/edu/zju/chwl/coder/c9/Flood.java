package edu.zju.chwl.coder.c9;

import java.util.LinkedList;

import org.junit.Test;

/**
 * DFS实现超时 求最优解采用BFS实现
 * 
 * @author chwl
 * @Date 2016年5月24日 下午11:25:48
 */
public class Flood {

	class Point {
		int x;
		int y;

		public Point(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
	}

	public int floodFill(int[][] map, int n, int m) {
        int direction[][]=new int[][]{{1,0},{0,1},{0,-1},{-1,0}};
		LinkedList<Point> q = new LinkedList<Point>();
		q.offer(new Point(0, 0));
		map[0][0] = 1;
		int step=0;
		while (!q.isEmpty()) {
			int size = q.size(); //一定要先把size取出来
			for (int k = 0; k < size; k++) {
				Point temp = q.poll();
				if (temp.x == n-1 && temp.y == m-1) {
					return step;
				}
				for (int i = 0; i < 4; i++) {
					Point go = new Point(temp.x + direction[i][0], temp.y
							+ direction[i][1]);
					if (isValid(map,n,m,go.x,go.y)) {
						map[go.x][go.y] = 1;
						q.add(go);
					}
				}
			}
			step++;
		}
		return step;
	}

	private boolean isValid(int[][] map, int rows, int cols, int i, int j) {
		if (i >= 0 && i < rows && j >= 0 && j < cols && map[i][j] != 1)
			return true;
		return false;
	}

	@Test
	public void test() {
		
		System.out.println(floodFill(new int[][] {{0, 1 ,0 ,0, 0},
				{0 ,1, 0, 1, 0},
				{0, 0, 0, 1, 0}},3,5));
		System.out.println(floodFill(new int[][] {
				{ 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1,
						1, 0, 0, 0, 0, 0, 0 },
				{ 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,
						1, 0, 1, 0, 1, 1, 0 },
				{ 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1,
						1, 0, 0, 1, 1, 0, 1 },
				{ 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1,
						0, 1, 1, 1, 0, 1, 0 },
				{ 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0,
						1, 0, 0, 1, 1, 1, 0 },
				{ 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0,
						0, 0, 1, 0, 1, 0, 0 },
				{ 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1,
						1, 1, 0, 0, 0, 0, 0 },
				{ 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,
						1, 1, 1, 1, 0, 0, 0 },
				{ 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
						0, 0, 0, 0, 0, 1, 1 },
				{ 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1,
						0, 1, 1, 0, 0, 0, 0 },
				{ 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
						1, 1, 0, 0, 0, 1, 1 },
				{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0,
						1, 1, 0, 1, 0, 1, 1 },
				{ 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
						1, 0, 0, 0, 1, 1, 0 },
				{ 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1,
						1, 1, 1, 0, 1, 0, 0 },
				{ 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1,
						0, 1, 0, 1, 0, 0, 1 },
				{ 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1,
						0, 1, 0, 1, 1, 0, 1 },
				{ 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
						1, 1, 1, 1, 0, 1, 0 },
				{ 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0,
						1, 0, 1, 1, 0, 0, 0 },
				{ 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1,
						0, 1, 1, 1, 1, 0, 0 },
				{ 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,
						0, 0, 1, 1, 0, 0, 1 },
				{ 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1,
						0, 1, 1, 0, 1, 1, 1 },
				{ 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
						0, 1, 1, 1, 1, 1, 0 },
				{ 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1,
						1, 1, 0, 0, 1, 0, 1 },
				{ 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
						0, 0, 1, 1, 1, 0, 1 },
				{ 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
						0, 0, 1, 1, 0, 0, 0 },
				{ 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0,
						1, 1, 0, 1, 1, 0, 1 },
				{ 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,
						0, 1, 1, 0, 0, 0, 1 },
				{ 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,
						1, 1, 0, 0, 1, 1, 1 },
				{ 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0,
						0, 1, 1, 0, 1, 1, 1 },
				{ 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
						0, 1, 1, 0, 0, 0, 0 },
				{ 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 0, 0, 1, 0, 1, 1 },
				{ 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
						1, 0, 0, 0, 1, 1, 1 },
				{ 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
						0, 1, 1, 0, 0, 0, 1 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0 } }, 34, 27));
	}
}
